"0","# Create training set using data 80% of the data"
"0","train <- df.ts %>%"
"0","  group_by(PRODUNIT_ID) %>% "
"0","  slice_head(prop=0.8) %>% "
"0","  as_tsibble(key=PRODUNIT_ID,index=PERIOD_DATE)"
"0",""
"0","# Define decomposition models"
"0","STLF_Euclid <- decomposition_model("
"0","    STL(log(QTY)),"
"0","    ETS(season_adjust)"
"0","  )"
"0",""
"0","STLF_Weekly <- decomposition_model("
"0","  STL(log(QTY) ~ season(period = ""week""),"
"0","      robust = TRUE),"
"0","  ETS(season_adjust))"
"0","  "
"0","# Fit models to the training data"
"0","plan(multisession)"
"0",""
"0","test.models <- train %>% "
"0","  model("
"0","    Mean = MEAN(log(QTY)),"
"0","    Theta = THETA(log(QTY)),"
"0","    ETS = ETS(log(QTY)),"
"0","    Croston = CROSTON(QTY,type = ""sbj""),"
"0","    Linear.Regression = TSLM(log(QTY)),"
"0","    ARIMA = ARIMA(log(QTY)),"
"0","    Neural = NNETAR(log(QTY)),"
"0","    Euclid = STLF_Euclid,"
"0","    Euclid_Weekly = STLF_Weekly,"
"0","    Prophet_Week = prophet(log(QTY)~season(period=""week"",3))) %>% "
"0","  mutate(kitchen_sink_ensemble=(Mean + Theta + ETS + Croston + Linear.Regression + ARIMA + Neural + Prophet_Week + Euclid + Euclid_Multiple)/10,ProphetandNeural=(Prophet_Week + Neural)/2)"
"1","[1m[33mError[39m in `mutate()`:[22m
[38;5;251m[36mâ„¹[38;5;251m In argument: `kitchen_sink_ensemble = `/`(...)`.[39m
[1mCaused by error:[22m
[33m![39m object 'Euclid_Multiple' not found
Backtrace:
[90m 1. [39m... %>% ...
[90m 3. [39m[1m[94mdplyr:::mutate.data.frame([39m[22m...[1m[94m)[39m[22m
[90m 4. [39mdplyr:::mutate_cols(.data, dplyr_quosures(...), by)
[90m 6. [39mdplyr:::mutate_col(dots[[i]], data, mask, new_columns)
[90m 7. [39mmask$eval_all_mutate(quo)
[90m 8. [39m[1mdplyr[22m (local) eval()
"
