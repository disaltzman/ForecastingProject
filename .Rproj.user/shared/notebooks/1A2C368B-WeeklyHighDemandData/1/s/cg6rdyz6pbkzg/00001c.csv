"0","# Create training set using data 80% of the data"
"0","train <- df.ts %>%"
"0","  group_by(sku) %>% "
"0","  slice_head(prop=0.8) %>% "
"0","  as_tsibble(key=sku,index=date)"
"0",""
"0","# Create testing set with remaining 20%"
"0","test <- df.ts %>%"
"0","  group_by(sku) %>% "
"0","  anti_join(train)"
"0",""
"0","# Define decomposition model (Old QueBIT approach)"
"0","STLF <- decomposition_model("
"0","    STL(gross_units),"
"0","    ETS(season_adjust)"
"0","  )"
"0",""
"0","# Fit models to the training data"
"0","plan(multisession) # use all cores available on CPU"
"0",""
"0","test.models.weekly <- train %>% "
"0","  model("
"0","    Mean = MEAN(gross_units),"
"0","    Theta = THETA(gross_units),"
"0","    ETS = ETS(gross_units),"
"0","    Linear.Regression = TSLM(gross_units),"
"0","    ARIMA = ARIMA(gross_units),"
"0","    QueBIT_Old = STLF,"
"0","    Prophet = prophet(gross_units ~ season(period=""year"",3))) %>%"
"0","  mutate(Intermediate.Ensemble = (Theta + Linear.Regression + ETS + "
"0","                                    ARIMA + QueBIT_Old)/5,"
"0","         Kitchen.Sink.Ensemble = (Mean + Theta + Linear.Regression + "
"0","                                    ETS + ARIMA + QueBIT_Old + Prophet)/7)"
"0",""
"0","# Forecast testing data"
"0","plan(multisession)"
"0",""
"0","fc.test.weekly <- test.models.weekly %>% "
"0","  forecast(test)"
"0",""
"0","# Check accuracy of the forecasts"
"0","tictoc::tic()"
"0","test.acc.weekly <- accuracy(fc.test.weekly,df.ts)"
